plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.105'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')
    //minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
            programArgument '--nogui'
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        clientData {
            clientData()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation 'thedarkcolour:kotlinforforge-neoforge:5.7.0:slim'
    additionalRuntimeClasspath 'org.jetbrains.kotlin:kotlin-stdlib'
    additionalRuntimeClasspath 'org.jetbrains.kotlin:kotlin-reflect'
    additionalRuntimeClasspath 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    additionalRuntimeClasspath 'org.jetbrains.kotlinx:kotlinx-serialization-core'
    additionalRuntimeClasspath 'org.jetbrains.kotlinx:kotlinx-serialization-json'

    implementation(jarJar("io.github.dokar3:quickjs-kt") {
        version {
            strictly '[1.0.0-alpha13, 2.0.0)'
            prefer '1.0.0-alpha13'
        }
    })
    additionalRuntimeClasspath(group: "io.github.dokar3", name: "quickjs-kt", version: "1.0.0-alpha13")
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
kotlin {
    jvmToolchain(21)
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
